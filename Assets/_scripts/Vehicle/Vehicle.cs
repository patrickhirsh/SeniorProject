using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Level
{
    public class Vehicle : MonoBehaviour
    {
        public bool DebugMode;
        public Connection CurrentConnection;
        public float LookAhead = .2f;
        public float Speed = 5f;

        private Coroutine _animationTween;

        protected void Start()
        {
            // TODO: Determine the starting connection (probably on vehicle spawn).
            CurrentConnection = EntityManager.Instance.Connections.Where(connection => connection.Paths.Any())
                .OrderBy(connection => Vector3.Distance(transform.position, connection.transform.position))
                .FirstOrDefault();
        }

        #region VEHICLE PATHING

        /// <summary>
        /// Halts this vehicle's pathing (if any is being done)
        /// </summary>
        public void StopTraveling()
        {
            if (_animationTween != null) StopCoroutine(_animationTween);
        }

        /// <summary>
        /// Moves this vehicle along the given path of connections.
        /// traversing it by starting the TravelPath() coroutine.
        /// </summary>
        public void StartTraveling(Queue<Connection> connections)
        {
            var vehicleCurve = GeneratePath(connections);
            _animationTween = StartCoroutine(TravelPath(vehicleCurve));
        }

        /// <summary>
        /// Creates a BezierCurve component with a path generated by passing a queue of connections
        /// </summary>
        /// <param name="connections"></param>
        /// <returns>A BezierCurve component</returns>
        private BezierCurve GeneratePath(Queue<Connection> connections)
        {
            BezierCurve vehicleCurve = gameObject.AddComponent<BezierCurve>();
            Connection current = CurrentConnection;
            // traverse each path in _connectionsPath
            while (connections.Count > 0)
            {
                BezierCurve curve;
                Connection target = connections.Dequeue();
                if (current.GetPathToConnection(target, out curve))
                {
                    foreach (var point in curve.GetAnchorPoints())
                    {
                        vehicleCurve.AddPoint(point);
                    }
                }
                else if (DebugMode)
                {
                    Debug.LogWarning($"Could not find path");
                }

                current = target.ConnectsTo;
            }

            return vehicleCurve;
        }

        /// <summary>
        /// A coroutine that moves the vehicle along a BezierCurve path
        /// each path as it goes.
        /// </summary>
        /// <param name="vehicleCurve"></param>
        private IEnumerator TravelPath(BezierCurve vehicleCurve)
        {
            // traverse the path
            float position = 0.0f;
            while (position <= 1)
            {
                position += (Speed * Time.deltaTime) / vehicleCurve.length;
                transform.position = vehicleCurve.GetPointAt(position);

                if (position + LookAhead < 1f)
                    transform.LookAt(vehicleCurve.GetPointAt(position + LookAhead));
                    Debug.DrawLine(transform.position, vehicleCurve.GetPointAt(position + LookAhead), Color.cyan, .5f);

                yield return null;
            }

            // Remove the curve
            Destroy(vehicleCurve);
        }

        #endregion
    }
}